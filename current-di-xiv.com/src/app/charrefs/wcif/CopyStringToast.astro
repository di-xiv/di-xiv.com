---
interface Props {
  localizedToast: string;
  toastID: string;
  stringToCopy: string;
  triggerButtonID: string;
}

const { localizedToast, toastID, stringToCopy, triggerButtonID } = Astro.props;
---

<div
  id={toastID}
  class="hidden select-none justify-center w-auto h-auto rounded-lg p-3 mobile-only:p-1 items-center toast-glassbox toast z-20"
  aria-live="polite"
>
  <div class="inline-block glassbox p-2 mobile-only:p-1 rounded-md">
    <slot />
  </div>
  <p
    class="regular text-lg mobile-only:text-sm inline-block text-wrap ml-2 mobile-only:mr-2"
  >
    {localizedToast}
  </p>
</div>

<script is:inline define:vars={{ toastID, stringToCopy, triggerButtonID }}>
  function showToast(toastElement) {
    toastElement.classList.remove("hidden");
    toastElement.classList.add("flex");
    setTimeout(() => {
      toastElement.classList.remove("flex");
      toastElement.classList.add("hidden");
    }, 3000);
  }

  function copyToClipboard(text) {
    return navigator.clipboard.writeText(text);
  }

  document.addEventListener("DOMContentLoaded", () => {
    const triggerButton = document.getElementById(triggerButtonID);
    const toastElement = document.getElementById(toastID);

    triggerButton?.addEventListener("click", async () => {
      try {
        await copyToClipboard(stringToCopy);
        showToast(toastElement);
      } catch (err) {
        console.error("Could not copy text:", err);
      }
    });
  });
</script>
