---
// Constants
const currentUrl = Astro.url.toString();
// Layout
import Header from "@/components/layout/header/Header.astro";
import Aside from "@/components/layout/aside/Aside.astro";
import Main from "@/components/layout/main/Main.astro";
import Footer from "@/components/layout/footer/Footer.astro";
// Styles
import "@/styles/global.css";
/// Decorations
import "@/styles/decorations/buttons.css";
import "@/styles/decorations/color.css";
import "@/styles/decorations/dark-mode.css";
import "@/styles/decorations/polkadot-bg.css";
import "@/styles/decorations/scrollbar.css";
/// Typography
import "@/styles/fonts/size.css";
import "@/styles/fonts/decorations.css";
import "@/styles/fonts/family.css";
import "@/styles/fonts/weight-style.css";
/// Animations
import "@/styles/animations/keyframes.css";
import "@/styles/animations/transitions.css";
// Notices
import BraveBanner from "@/components/logic/BraveNotice/BraveBanner.astro";
interface Props {
  // Base
  locale: "en" | "ja" | "pt" | "es";
  currentPage: string;
  // Meta
  metaDescription: string;
  metaKeywords: string;
  // OpenGraph/Rich Links
  metaImageURL: string;
  metaImageFormat: string;
  metaImageHeight: string;
  metaImageWidth: string;
  metaImageAlt: string;
  // Header
  headerContent: string;
  // Aside
  localizedCharRefs: string;
  localizedCommWorks: string;
  localizedContact: string;
  localizedInquiries: string;
}

const {
  locale,
  localizedInquiries,
  localizedContact,
  localizedCommWorks,
  localizedCharRefs,
  headerContent,
  metaImageURL,
  metaDescription,
  metaKeywords,
  metaImageFormat,
  metaImageHeight,
  metaImageWidth,
  metaImageAlt,
  currentPage,
} = Astro.props;
---

<!--
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
    ,---,                           ,--,     ,--,     ,---,
  .'  .' `\     ,--,                |'. \   / .`|  ,`--.' |        ,---.
,---.'     \  ,--.'|        ,---,.  ; \ `\ /' / ;  |   :  :       /__./|
|   |  .`\  | |  |,       ,'  .' |  `. \  /  / .'  :   |  '  ,---.;  ; |
:   : |  '  | `--'_     ,---.'   ,   \  \/  / ./   |   :  | /___/ \  | |
|   ' '  ;  : ,' ,'|    |   |    |    \  \.'  /    '   '  ; \   ;  \ ' |
'   | ;  .  | '  | |    :   :  .'      \  ;  ;     |   |  |  \   \  \: |
|   | :  |  ' |  | :    :   |.'       / \  \  \    '   :  ;   ;   \  ' .
'   : | /  ;  '  : |__  `---'        ;  /\  \  \   |   |  '    \   \   '
|   | '` ,/   |  | '.'|            ./__;  \  ;  \  '   :  |     \   `  ;
;   :  .'     ;  :    ;            |   : / \  \  ; ;   |.'       :   \ |
|   ,.'       |  ,   /             ;   |/   \  ' | '---'          '---"
'---'          ---`-'              `---'     `--`
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈   Fancy meeting you here!   ❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
 _____                                   _____             _
/  ___|                                 /  __ \           | |
\ `--.   ___   _   _  _ __   ___   ___  | /  \/  ___    __| |  ___
 `--. \ / _ \ | | | || '__| / __| / _ \ | |     / _ \  / _` | / _ \
/\__/ /| (_) || |_| || |   | (__ |  __/ | \__/\| (_) || (_| ||  __/
\____/  \___/  \__,_||_|    \___| \___|  \____/ \___/  \__,_| \___|

                  .
  .. ............;;.
    ..::::::::::::;;;;. https://github.com/di-xiv/di-xiv.com
  . . ::::::::::::;;:'
                  :'
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
-->
<html lang={locale}>
  <head>
    <meta charset="utf-8" />
    <link rel="canonical" href={currentUrl} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="light, dark" />
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="generator" content={Astro.generator} />
    <meta property="og:url" content={currentUrl} />
    <!-- Meta descriptions -->
    <meta name="description" content={metaDescription} />
    <meta name="keywords" content={metaKeywords} />
    <meta name="author" content="Di-XIV" />
    <meta name="title" content={headerContent} />
    <!-- OpenGraph -->
    <meta property="og:title" content={headerContent} />
    <meta property="og:description" content={metaDescription} />
    <meta property="og:image" content={metaImageURL} />
    <meta property="og:image:type" content={metaImageFormat} />
    <meta property="og:image:height" content={metaImageHeight} />
    <meta property="og:image:width" content={metaImageWidth} />
    <meta property="og:image:alt" content={metaImageAlt} />
    <meta property="og:url" content={currentUrl} />
    <meta property="og:locale" content={locale} />
    <meta property="og:site_name" content={headerContent} />
    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={metaImageURL} />
    <meta name="twitter:creator" content="@xiv_di" />
    <meta name="twitter:site" content="@xiv_di" />
    <title>{headerContent}</title>
  </head>
  <body
    id="body"
    class="flex flex-col min-h-[100dvh] bg-[#efefef] text-[#181a1b] dark:bg-[#181a1b] dark:text-[#efefef]"
  >
    <Aside
      locale={locale}
      localizedCharRefs={localizedCharRefs}
      localizedCommWorks={localizedCommWorks}
      localizedContact={localizedContact}
      localizedInquiries={localizedInquiries}
    />
    <div class="flex flex-col flex-grow z-[1]">
      <div class="flex-grow overflow-auto">
        <Main locale={locale} currentPage={currentPage}>
          <slot />
        </Main>
      </div>
      <Footer locale={locale} />
    </div>
    <BraveBanner locale={locale} />
  </body>
</html>
<script>
  function setBackgroundColor(color: string) {
    document.documentElement.style.setProperty("--bg-color", color);
    document.body.style.backgroundColor = color;
  }

  function getRandomColor(colorArray: string[]): string {
    return colorArray[Math.floor(Math.random() * colorArray.length)];
  }

  function applyBackgroundColor() {
    if (window.matchMedia) {
      const prefersDarkMode = window.matchMedia(
        "(prefers-color-scheme: dark)",
      ).matches;
      const darkModeColors = [
        "#1c1b22", // Dark Charcoal
        "#3b3948", // Slate Gray
        "#1f1f1f", // Almost Black
        "#181818", // Deep Black
        "#15202b", // Midnight Blue
        "#313338", // Graphite Gray
        "#36393f", // Gunmetal
        "#2C2F33", // Dark Slate
        "#23272A", // Dark Storm Gray
        "#1D2A35", // Dark Teal
        "#2B2E3A", // Deep Blue Gray
        "#22303C", // Muted Ocean Blue
        "#20232A", // Charcoal Black
        "#171A21", // Deep Space Black
      ];

      const lightModeColors = [
        "#CB99C9", // Lavender
        "#F49AC2", // Light Pink
        "#AEC6CF", // Pastel Blue
        "#CDEB83", // Light Green
        "#8BC3B1", // Mint Green
        "#F9D999", // Light Yellow-Orange
        "#99C7FF", // Pastel Sky Blue
        "#EDE9AF", // Pale Yellow
        "#FFBDBD", // Soft Coral
        "#E5D4EF", // Soft Lilac
        "#D5E8D4", // Pale Mint
        "#FDEFD3", // Light Peach
        "#C4D9F2", // Light Periwinkle
        "#FADADD", // Soft Rose
        "#D8E1E8", // Cool Gray
      ];

      const currentTime = new Date().getTime();
      const storedData = JSON.parse(
        localStorage.getItem("backgroundColorData") || "{}",
      );
      const twelveHoursInMs = 12 * 60 * 60 * 1000;

      let newColor;

      if (
        !storedData.color ||
        !storedData.timestamp ||
        currentTime - storedData.timestamp > twelveHoursInMs ||
        (prefersDarkMode && !darkModeColors.includes(storedData.color)) ||
        (!prefersDarkMode && !lightModeColors.includes(storedData.color))
      ) {
        newColor = getRandomColor(
          prefersDarkMode ? darkModeColors : lightModeColors,
        );
        localStorage.setItem(
          "backgroundColorData",
          JSON.stringify({
            color: newColor,
            timestamp: currentTime,
          }),
        );
      } else {
        newColor = storedData.color;
      }

      setBackgroundColor(newColor);
    } else {
      console.log("matchMedia not supported, unable to determine dark mode.");
    }
  }

  setTimeout(() => {
    applyBackgroundColor();
    document.body.style.opacity = "1";
  }, 50);

  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      location.reload();
    });
  function isFirefox() {
    return navigator.userAgent.toLowerCase().indexOf("firefox") > -1;
  }

  if (!isFirefox()) {
    document.documentElement.classList.add("custom-scrollbar");
  }
</script>
