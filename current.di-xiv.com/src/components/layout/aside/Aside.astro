---
import { Image } from "astro:assets";
import DateTimeTooltip from "@/components/layout/aside/components/DateTimeAsTooltip";
import WingspanBrandIcon from "/favicon.ico";
import DrawerCloseButton from "@/components/layout/aside/components/DrawerCloseButton.astro";
import DivisorLine from "@/components/navigation/DivisorLine.astro";
import LanguageSelector from "@/components/logic/LanguageSelector.tsx";
import SocialsIcons from "@/components/navigation/SocialsIcons.astro";
//
import HeaderButtonMenu from "../header/components/HeaderButtonMenu.astro";
//
interface Props {
  locale: "en" | "ja" | "pt" | "es";
  localizedCharRefs: string;
  localizedContact: string;
  localizedCommWorks: string;
  localizedInquiries: string;
}
//
const buildTime = new Date();
//
const localizedDesignReferences = {
  en: "Design References",
  ja: "デザイン・リファレンス",
  es: "Diseños de Referencia",
  pt: "Referências de Design",
};
const localizedColorPallette = {
  en: "Color Pallette",
  ja: "カラーパレット",
  es: "Paleta de Colores",
  pt: "Paleta de Cores",
};
const localizedInGameReferences = {
  en: "In-game references",
  ja: "ゲーム内スクリーンショット",
  es: "Capturas in-game",
  pt: "Capturas de tela do jogo",
};
const localizedTermsOfUse = {
  en: "Terms of Use",
  ja: "利用規約",
  es: "Términos de Uso",
  pt: "Termos de Uso",
};
const localizedFriendlyTakedown = {
  en: "Friendly Takedowns",
  ja: "フレンドリーな削除 (🇬🇧)",
  es: "Retiradas Amistosas (🇬🇧)",
  pt: "Remoções Amigáveis (🇬🇧)",
};
const localizedLegalTakedown = {
  en: "Legal Takedowns",
  ja: "法的な削除 (🇬🇧)",
  es: "Retiradas Legales (🇬🇧)",
  pt: "Remoções Legais (🇬🇧)",
};
//
const {
  locale,
  localizedCharRefs,
  localizedContact,
  localizedCommWorks,
  localizedInquiries,
} = Astro.props;
function getLocalizedRoute() {
  if (locale && locale !== "en") {
    return `/${locale}`;
  } else {
    return ``;
  }
}
function localizedHome() {
  if (locale !== "en") {
    return `/${locale}`;
  } else {
    return `/`;
  }
}
const navItems = [
  {
    href: "/character-references",
    icon: "/icons/aside/clarity--design-line.svg",
    key: "charrefs",
    label: localizedCharRefs,
  },
  {
    href: "/commissioned-works",
    icon: "/icons/aside/material-symbols--wall-art-outline.svg",
    key: "commworks",
    label: localizedCommWorks,
  },
  {
    href: "/contact",
    icon: "/icons/aside/hugeicons--contact-01.svg",
    key: "contact",
    label: localizedContact,
  },
  {
    href: "/inquiries",
    icon: "/icons/aside/mdi--faq.svg",
    key: "inquiries",
    label: localizedInquiries,
  },
];
const subNavItems = new Map([
  [
    "charrefs",
    [
      {
        href: `/character-references?page=design-references`,
        label: `${localizedDesignReferences[locale]}`,
      },
      {
        href: `/character-references?page=color-pallette`,
        label: `${localizedColorPallette[locale]}`,
      },
      {
        href: `/character-references?page=ingame-references`,
        label: `${localizedInGameReferences[locale]}`,
      },
      {
        href: `/character-references?page=wcif`,
        label: "WCIF",
      },
    ],
  ],
  [
    "commworks",
    [
      {
        href: `/commissioned-works/?ratings=1`,
        label: "SFW",
      },
      {
        href: `/commissioned-works/?ratings=1,2`,
        label: "NSFW",
      },
    ],
  ],
  [
    "inquiries",
    [
      { href: `/inquiries#tou`, label: `${localizedTermsOfUse[locale]}` },
      { href: `/inquiries#faq`, label: "FAQ" },
      {
        href: `/inquiries#friendly-takedown`,
        label: `${localizedFriendlyTakedown[locale]}`,
      },
      {
        href: `/inquiries#legal-takedown`,
        label: `${localizedLegalTakedown[locale]}`,
      },
    ],
  ],
]);
---

<HeaderButtonMenu locale={locale} />
<aside
  id="drawer-menu-wrapper"
  class="fixed top-0 left-0 flex flex-col h-screen
  ultrawide-only:w-[18%]
  w-[23%]
  w-1560:w-[30%]
  w-1150:w-[43%]
  mobile-only:w-[70%]
  bg-[rgba(255,255,255,1)] glassbox text-[#181a1b] dark:text-[#efefef] z-[9999] shadow-[2px_0_5px_-2px_rgba(0,0,0,0.5)]
  rounded-tr-lg rounded-br-lg select-none"
>
  <DrawerCloseButton />
  <div id="drawer-menu-container" class="flex flex-col h-full">
    <div id="drawer-header" class="mt-[5%]">
      <a
        href={localizedHome()}
        id="wingspan-wrapper"
        class="flex justify-center"
      >
        <Image
          loading="eager"
          src={WingspanBrandIcon}
          width={128}
          height={128}
          class="ultrawide-only:w-32 w-28 w-1560:w-24 w-1150:w-20 mobile-only:w-16 h-auto"
          alt="Di-XIV Brand Icon"
        />
      </a>
    </div>
    <DivisorLine />
    <div id="drawer-nav" class="flex-grow overflow-y-auto mt-[10%]">
      <nav class="ml-[10%] grid grid-cols-1 gap-y-3">
        {
          navItems.map((item) => (
            <div class="nav-item">
              <a
                id={`nav-${item.key}`}
                aria-label={item.label}
                href={`${getLocalizedRoute()}${item.href}`}
                class="flex items-center"
              >
                <Image
                  loading="eager"
                  src={item.icon}
                  width={28}
                  height={28}
                  class="w-7 mobile-only:w-5 h-auto dark:invert not-mobile:relative not-mobile:-top-1 not-mobile:mr-[25px] mobile-only:mr-[15px]"
                  alt={`${item.label} icon`}
                />
                <p
                  class="text-large mobile-only:text-base regular"
                  title={item.label}
                  aria-label={item.label}
                >
                  {item.label}
                </p>
              </a>
              {subNavItems.has(item.key) && subNavItems.get(item.key) && (
                <div
                  class="mt-2
                  not-mobile:ml-[55px] mobile-only:ml-[45px]
                "
                >
                  {subNavItems.get(item.key)!.map((subItem) => (
                    <a
                      href={`${getLocalizedRoute()}${subItem.href}`}
                      class="block py-1 text-sm hover:underline"
                    >
                      <p class="light">❈ {subItem.label}</p>
                    </a>
                  ))}
                </div>
              )}
            </div>
          ))
        }
      </nav>
    </div>
    <div id="drawer-footer" class="mt-auto mobile-only:pb-[25%]">
      <div class="flex justify-center mt-[10%] mb-[10%]">
        <LanguageSelector client:load />
      </div>
      <div class="flex justify-center mb-[1%]">
        <SocialsIcons />
      </div>
      <DivisorLine />
      <div
        id="drawer-version"
        class="mb-[10%] flex justify-center light mt-2 regular"
      >
        <div class="flex">
          <Image
            loading="eager"
            src={WingspanBrandIcon}
            width={36}
            height={36}
            class="w-9 h-auto relative -top-[6px]"
            alt="Di-XIV Brand Icon"
          />
        </div>
        <DateTimeTooltip
          locale={locale}
          position="right"
          buildTime={buildTime}
          client:load
        >
          <p class="cursor-help">❈&nbsp;&nbsp;v.4.6.5</p>
        </DateTimeTooltip>
      </div>
    </div>
  </div>
</aside>
<div id="drawer-shade" class="fixed top-0 left-0 w-full h-full z-[9998] hidden">
</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    let drawerVisible = false;
    let initialLoad = true;

    const elements = {
      drawerButton: document.getElementById(
        "drawer-close-button",
      ) as HTMLElement,
      drawerMenu: document.getElementById("drawer-menu-wrapper") as HTMLElement,
      headerButton: document.getElementById(
        "header-aside-toggle",
      ) as HTMLElement,
      drawerShade: document.getElementById("drawer-shade") as HTMLElement,
    };

    const updateShadeVisibility = () => {
      const isMobile = window.innerWidth < 725;
      if (isMobile && drawerVisible) {
        elements.drawerShade.classList.remove("hidden");
        elements.drawerShade.classList.add("flex");
      } else {
        elements.drawerShade.classList.remove("flex");
        elements.drawerShade.classList.add("hidden");
      }
    };

    const toggleDrawer = (show: boolean, animate: boolean = true) => {
      elements.headerButton.classList.toggle("hidden", show);
      elements.headerButton.classList.toggle("block", !show);

      if (animate) {
        elements.drawerMenu.classList.toggle("slide-in-left", show);
        elements.drawerMenu.classList.toggle("slide-out-left", !show);
      } else {
        elements.drawerMenu.classList.remove("slide-in-left", "slide-out-left");
        elements.drawerMenu.style.transform = show
          ? "translateX(0)"
          : "translateX(-100%)";
      }

      drawerVisible = show;
      updateShadeVisibility();
    };

    const showDrawer = (animate: boolean = true) => toggleDrawer(true, animate);
    const hideDrawer = (animate: boolean = true) =>
      toggleDrawer(false, animate);

    const checkViewportWidth = () => {
      const shouldShowDrawer = window.innerWidth > 1250;
      if (shouldShowDrawer !== drawerVisible || initialLoad) {
        toggleDrawer(shouldShowDrawer, !initialLoad);
        initialLoad = false;
      }
      updateShadeVisibility();
    };

    elements.drawerButton.addEventListener("click", () => hideDrawer(true));
    elements.drawerShade.addEventListener("click", () => hideDrawer(true));

    elements.headerButton.addEventListener("click", () => {
      drawerVisible ? hideDrawer(true) : showDrawer(true);
    });

    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && drawerVisible) {
        hideDrawer(true);
      }
    });

    // Initial setup
    checkViewportWidth();
    window.addEventListener("resize", checkViewportWidth);

    // Ensure the drawer is hidden on small viewports on initial load
    if (window.innerWidth <= 1150) {
      hideDrawer(false);
    }
  });
</script>
