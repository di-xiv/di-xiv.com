---
interface Props {
  localizedDetailsTooltipTop: string;
  localizedDetailsTooltipBottom: string;
  localizedDismissButtonString: string;
}

const {
  localizedDetailsTooltipTop,
  localizedDetailsTooltipBottom,
  localizedDismissButtonString,
} = Astro.props as Props;
---

<div
  id="details-tooltip-wrapper"
  class="hidden fixed top-[8%] right-[15%] w1112:right-[8%] mobile-only:right-0 mobile-only:top-[6%]"
>
  <div
    id="details-tooltip-container"
    class="grid grid-cols-1 gap-1 p-3 mobile-only:p-1 items-center glassbox rounded-lg mobile-only:max-w-[75%] mobile-only:ml-[12.5%]"
  >
    <div
      id="tooltip-idea-icon-wrapper"
      class="fixed top-[-12px] mobile-only:top-[-9px] right-[-16px] mobile-only:right-[-12px]"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-8 mobile-only:h-6 w-auto"
        viewBox="0 0 48 48"
      >
        <circle cx="24" cy="22" r="20" fill="#fff59d"></circle><path
          fill="#fbc02d"
          d="M37 22c0-7.7-6.6-13.8-14.5-12.9c-6 .7-10.8 5.5-11.4 11.5c-.5 4.6 1.4 8.7 4.6 11.3c1.4 1.2 2.3 2.9 2.3 4.8v.3h12v-.1c0-1.8.8-3.6 2.2-4.8c2.9-2.4 4.8-6 4.8-10.1"
        ></path><path
          fill="#fff59d"
          d="m30.6 20.2l-3-2c-.3-.2-.8-.2-1.1 0L24 19.8l-2.4-1.6c-.3-.2-.8-.2-1.1 0l-3 2c-.2.2-.4.4-.4.7s0 .6.2.8l3.8 4.7V37h2V26c0-.2-.1-.4-.2-.6l-3.3-4.1l1.5-1l2.4 1.6c.3.2.8.2 1.1 0l2.4-1.6l1.5 1l-3.3 4.1c-.1.2-.2.4-.2.6v11h2V26.4l3.8-4.7c.2-.2.3-.5.2-.8s-.2-.6-.4-.7"
        ></path><circle cx="24" cy="44" r="3" fill="#5c6bc0"></circle><path
          fill="#9fa8da"
          d="M26 45h-4c-2.2 0-4-1.8-4-4v-5h12v5c0 2.2-1.8 4-4 4"></path><path
          fill="#5c6bc0"
          d="m30 41l-11.6 1.6c.3.7.9 1.4 1.6 1.8l9.4-1.3q.6-.9.6-2.1m-12-2.3v2L30 39v-2z"
        ></path>
      </svg>
    </div>
    <div id="details-text-top" class="flex items-center">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-4 w-auto mr-2 inline-block"
        viewBox="0 0 20 20"
      >
        <path
          fill="currentColor"
          d="M3 8V6h9v2zm9-3H1V3h11zm1-2h6v6h-6zm-1 13H3v-2h9zm0-3H1v-2h11zm1-2h6v6h-6z"
        ></path></svg
      >
      <span
        class="regular text-base mobile-only:text-xs text-nowrap mobile-only:text-wrap inline-block"
      >
        {localizedDetailsTooltipTop}
      </span>
    </div>
    <div id="details-text-bottom" class="flex items-center">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-4 w-auto mr-2 inline-block"
        viewBox="0 0 32 32"
      >
        <path
          fill="currentColor"
          d="M26 24v4H6v-4H4v4a2 2 0 0 0 2 2h20a2 2 0 0 0 2-2v-4zm0-10l-1.41-1.41L17 20.17V2h-2v18.17l-7.59-7.58L6 14l10 10z"
        ></path>
      </svg>
      <span
        class="regular text-base mobile-only:text-xs text-nowrap mobile-only:text-wrap"
      >
        {localizedDetailsTooltipBottom}
      </span>
    </div>
    <button id="details-tooltip-close-button" class="ml-2">
      <span
        class="ultralight text-base mobile-only:text-xs hover:underline button-glassbox"
      >
        {localizedDismissButtonString}
      </span>
    </button>
  </div>
</div>
<script>
  document.addEventListener("DOMContentLoaded", () => {
    const detailsWrapper = document.getElementById("details-tooltip-wrapper");
    const detailsCloseButton = document.getElementById(
      "details-tooltip-close-button",
    );
    detailsCloseButton.addEventListener("click", () => {
      localStorage.setItem("cookie-consent", "accepted");
      hideDetailsWrapper();
    });
    const hideDetailsWrapper = () => {
      detailsWrapper.classList.add("hidden");
    };
    function isWebKit() {
      return (
        !!window.navigator.userAgent.match(/AppleWebKit/i) &&
        !window.navigator.userAgent.match(/Edge|Edg|OPR|Opera|Firefox|Chrome/i)
      );
    }
    if (isWebKit()) {
      document
        .getElementById("details-tooltip-wrapper")
        .classList.add("hidden");
    }

    function checkAndToggleClass() {
      const urlParams = new URLSearchParams(window.location.search);

      const pageParam = urlParams.get("page");

      if (pageParam && pageParam.split(/[,|&]/).includes("design-references")) {
        const element = document.getElementById("details-tooltip-wrapper");

        if (element) {
          element.classList.remove("hidden");
        }
      }
    }
    function setupClickListener() {
      const accordionElement = document.getElementById(
        "references-accordion-container",
      );

      if (accordionElement) {
        accordionElement.addEventListener("click", () => {
          const element = document.getElementById("details-tooltip-wrapper");

          if (element) {
            element.classList.remove("hidden");
          }
        });
      }
    }
    window.onload = function () {
      checkAndToggleClass();
      setupClickListener();
    };
  });
</script>
