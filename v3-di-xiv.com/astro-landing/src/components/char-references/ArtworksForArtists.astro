---
interface Props {
  localizedSpecialReferenceSummary: string;
  localizedLoading: string;
}

const { localizedSpecialReferenceSummary, localizedLoading } =
  Astro.props as Props;
---

<details
  id="artworks-for-reference-container"
  class="glassbox p-3 mobile-only:p-2 rounded-lg"
  data-localized-special-reference-summary={localizedSpecialReferenceSummary}
>
  <summary class="regular text-2xl mb-[1%] mt-[1%]">
    <div class="dark:invert inline-block mr-2">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-11 mobile-only:h-6 w-auto mr-1 dark:invert"
        viewBox="0 0 48 48"
      >
        <path
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M15 23.5h25.5a2 2 0 0 1 2 2v15a2 2 0 0 1-2 2H15c-5.243 0-9.5-4.257-9.5-9.5h0c0-5.243 4.257-9.5 9.5-9.5"
        ></path><circle
          cx="15"
          cy="33"
          r="3.5"
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"></circle><path
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M11.5 33H5.504M18.5 33h24m-19.742 9.5v-19m10 0v19M8.283 39.718a9.5 9.5 0 0 1 0-13.436l18.03-18.03a2 2 0 0 1 2.83 0l10.606 10.606a2 2 0 0 1 0 2.828L37.935 23.5m-13.435 0l9.945-9.945m-13.606.171l9.774 9.774"
        ></path><path
          fill="none"
          stroke="currentColor"
          stroke-linecap="round"
          stroke-linejoin="round"
          d="M15 42.5A9.5 9.5 0 0 1 5.5 33V7.5a2 2 0 0 1 2-2h15a2 2 0 0 1 2 2v2.565m-9.5 9.5V5.5m-9.5 9.742h13.823"
        ></path>
      </svg>
    </div>
  </summary>
  <div id="message-container" class=""></div>
  <div
    id="artwork-container"
    class="flex overflow-x-auto h-[95%] p-4 overflow-hidden"
  >
  </div>
  <div id="loading-message" class="flex justify-center regular">
    <span class="inline-block">{localizedLoading}</span>
    <div class="justify-center dark:invert inline-block">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-8 w1366:h-6 mobile-only:h-8 w-auto select-none dark:invert inline-block mr-2"
        viewBox="0 0 24 24"
        ><circle cx="4" cy="12" r="3" fill="currentColor"
          ><animate
            id="svgSpinners3DotsScale0"
            attributeName="r"
            begin="0;svgSpinners3DotsScale1.end-0.25s"
            dur="0.75s"
            values="3;.2;3"></animate></circle
        ><circle cx="12" cy="12" r="3" fill="currentColor"
          ><animate
            attributeName="r"
            begin="svgSpinners3DotsScale0.end-0.6s"
            dur="0.75s"
            values="3;.2;3"></animate></circle
        ><circle cx="20" cy="12" r="3" fill="currentColor"
          ><animate
            id="svgSpinners3DotsScale1"
            attributeName="r"
            begin="svgSpinners3DotsScale0.end-0.45s"
            dur="0.75s"
            values="3;.2;3"></animate></circle
        ></svg
      >
    </div>
  </div>
  <div id="error-message" class="hidden flex justify-center regular"></div>
</details>

<script>
  document.addEventListener("DOMContentLoaded", async () => {
    let artworkEngine = [];
    let loading = true;
    let error = null;

    const messageContainer = document.getElementById("message-container");
    const artworkContainer = document.getElementById("artwork-container");
    const loadingMessage = document.getElementById("loading-message");
    const errorMessage = document.getElementById("error-message");
    const summaryElement = document.querySelector("summary");

    const localizedSpecialReferenceSummary = document.getElementById(
      "artworks-for-reference-container",
    ).dataset.localizedSpecialReferenceSummary;

    const searchParams = new URLSearchParams(window.location.search);

    const artworkIds = searchParams.get("reference")?.split(",") || [];
    const message4artist = searchParams.get("message4artist");
    const artistName = searchParams.get("artistName") || "Artist";

    const page = searchParams.get("page");

    if (artistName) {
      summaryElement.textContent = `${localizedSpecialReferenceSummary} ${artistName}`;
    }

    function openDetailsElement(elementId) {
      const detailsElement = document.getElementById(elementId);
      if (detailsElement) {
        detailsElement.setAttribute("open", "open");
      }
    }

    if (page) {
      const ids = page.split(/[|,&]/);
      ids.forEach((id) => {
        openDetailsElement(id);
      });
    }

    const wrapperElement = document.getElementById(
      "artworks-for-reference-container",
    );

    if (artworkIds.length === 0 || artworkIds[0] === "") {
      wrapperElement.remove();
      return;
    }

    async function fetchArtworks(apiURL, artworkIds) {
      try {
        const queryParam = `artwork_id=${artworkIds.join(",")}`;
        const requestUrl = `${apiURL}/artworks?${queryParam}`;

        const response = await fetch(requestUrl);

        const contentType = response.headers.get("content-type");

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        if (contentType && contentType.includes("application/json")) {
          const artworks = await response.json();
          artworkEngine = artworks;
        } else {
          const textResponse = await response.text();
          throw new Error("Unexpected response format: Not JSON");
        }
      } catch (err) {
        error = err.message;
      } finally {
        loading = false;
        updateUI();
      }
    }

    function updateUI() {
      loadingMessage.classList.add("hidden");

      if (error) {
        errorMessage.textContent = `Error loading data: ${error}. Please try again later.`;
        errorMessage.classList.remove("hidden");
        return;
      }

      if (artworkEngine.length > 0) {
        const artworkHTML = artworkEngine
          .map((artwork) => {
            const randomSuffix = Math.random().toString(36).substr(2, 9);
            const modalId = `${artwork.artwork_id}-modal-${randomSuffix}`;
            const zoomId = `${artwork.artwork_id}-modal-zoom-${randomSuffix}`;
            artwork.randomSuffix = randomSuffix;

            return `
          <article class="flex-shrink-0 h-[75vh] mr-4">
            <ul class="flex flex-col h-full">
              <li class="flex flex-col h-full justify-between">
                <div class="flex justify-center mt-4 mb-4 select-none glassbox p-3 mobile-only:p-1 rounded-md whitespace-nowrap">
                  <div class="dark:invert">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-auto mobile-only:h-4 dark:invert mr-1" viewBox="0 0 16 16">
                      <path fill="currentColor" d="M11.134 1.535c.7-.509 1.416-.942 2.076-1.155c.649-.21 1.463-.267 2.069.34c.603.601.568 1.411.368 2.07c-.202.668-.624 1.39-1.125 2.096c-1.011 1.424-2.496 2.987-3.775 4.249c-1.098 1.084-2.132 1.839-3.04 2.3a3.74 3.74 0 0 1-1.055 3.217c-.431.431-1.065.691-1.657.861c-.614.177-1.294.287-1.914.357A21 21 0 0 1 .797 16H.743l.007-.75H.749L.742 16a.75.75 0 0 1-.743-.742l.743-.008l-.742.007v-.054a21 21 0 0 1 .13-2.284q.101-.972.358-1.914c.17-.591.43-1.226.86-1.657a3.75 3.75 0 0 1 3.227-1.054c.466-.893 1.225-1.907 2.314-2.982c1.271-1.255 2.833-2.75 4.245-3.777M1.62 13.089q-.077.696-.104 1.395q.7-.027 1.396-.104a10.5 10.5 0 0 0 1.668-.309c.526-.151.856-.325 1.011-.48a2.25 2.25 0 1 0-3.182-3.182c-.155.155-.329.485-.48 1.01a10.5 10.5 0 0 0-.309 1.67m10.396-10.34c-1.224.89-2.605 2.189-3.822 3.384l1.718 1.718c1.21-1.205 2.51-2.597 3.387-3.833c.47-.662.78-1.227.912-1.662c.134-.444.032-.551.009-.575h-.001V1.78c-.014-.014-.113-.113-.548.027c-.432.14-.995.462-1.655.942m-4.832 7.266a10 10 0 0 0 1.63-1.142L7.155 7.216a9.7 9.7 0 0 0-1.161 1.607c.482.302.889.71 1.19 1.192"/>
                    </svg>
                  </div>
                  ${
                    artwork.artist_name
                      ? `
                          <div class="flex items-center border-b border-transparent whitespace-nowrap hover:text-[#1e7cff] ">
                            <a href="${artwork.artist_website || "#"}" target="_blank" rel="noopener noreferrer" class="ultralight text-xl mobile-only:text-lg" title="${artwork.artist_name}: ${artwork.artist_website}">
                              ${artwork.artist_name} â†—
                            </a>
                          </div>
                        `
                      : ""
                  }
                </div>
                <div class="relative group flex-grow flex items-center justify-center h-[70vh]">
                  <img src="${artwork.artwork_url}" alt="Artwork by ${
                    artwork.artist_name || "unknown artist"
                  }" class="h-full w-auto object-cover rounded-md" />
                  <div id="${zoomId}" class="glassbox p-2 rounded-sm z-10 absolute top-2 right-2 hover:text-[#1e7cff] cursor-pointer button-glassbox">
                    <div class="dark:invert">
                      <svg class="group-hover:block h-10 mobile-only:h-5 w-auto dark:invert" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                        <path fill="currentColor" d="M3 21v-6h2v2.6l3.1-3.1l1.4 1.4L6.4 19H9v2zM15.9 9.5l-1.4-1.4L17.6 5H15V3h6v6h-2V6.4z"/>
                      </svg>
                    </div>
                  </div>
                  <div class="glassbox absolute top-2 left-2 p-2 rounded-sm cursor-pointer button-glassbox items-center justify-center z-40 hover:text-[#1e7cff]">
                    <a href="${artwork.artwork_url}" target="_blank" download="${zoomId}" rel="noopener noreferer" title="Download ${artwork.artist_name}'s artwork">
                    <div class="dark:invert">
                      <svg xmlns="http://www.w3.org/2000/svg" class="group-hover:block h-10 mobile-only:h-5 w-auto dark:invert" viewBox="0 0 24 24">
                        <g fill="none"><path d="m12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035q-.016-.005-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427q-.004-.016-.017-.018m.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093q.019.005.029-.008l.004-.014l-.034-.614q-.005-.018-.02-.022m-.715.002a.02.02 0 0 0-.027.006l-.006.014l-.034.614q.001.018.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01z"/><path fill="currentColor" d="M8 5v2H5v13h14V7h-3V5h3a2 2 0 0 1 2 2v13a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2zm4-3a1 1 0 0 1 1 1v10.828L14.828 12a1 1 0 1 1 1.415 1.414l-3.36 3.359a1.25 1.25 0 0 1-1.767 0l-3.359-3.359A1 1 0 1 1 9.172 12L11 13.828V3a1 1 0 0 1 1-1"/>
                        </g>
                      </svg>
                    </div>
                    </a>
                  </div>
                  <div id="${modalId}" class="hidden fixed inset-0 bg-black bg-opacity-80 flex items-center justify-center z-50">
                    <img src="${artwork.artwork_url}" alt="Artwork by ${
                      artwork.artist_name || "unknown artist"
                    }" class="rounded-md" style="max-height: 90vh; width: auto;" />
                  </div>
                </div>
              </li>
            </ul>
          </article>
        `;
          })
          .join("");

        artworkContainer.innerHTML = artworkHTML;

        artworkEngine.forEach((artwork) => {
          const zoomId = `${artwork.artwork_id}-modal-zoom-${artwork.randomSuffix}`;
          const modalId = `${artwork.artwork_id}-modal-${artwork.randomSuffix}`;

          const zoomButton = document.getElementById(zoomId);
          const modalDiv = document.getElementById(modalId);

          if (zoomButton && modalDiv) {
            zoomButton.onclick = () => {
              modalDiv.classList.toggle("hidden");
            };

            modalDiv.onclick = () => {
              modalDiv.classList.add("hidden");
            };
          }
        });
      } else {
        const noDataMessage = `<p class="regular flex justify-center">No artworks available.</p>`;
        artworkContainer.innerHTML = noDataMessage;
      }
    }

    if (message4artist) {
      const messageHTML = `
        <p class="regular flex justify-center text-lg mobile-only:mt-[4%]">
          ${message4artist}
        </p>
      `;
      messageContainer.innerHTML = messageHTML;
    }

    if (artworkIds.length > 0) {
      const apiURL = "https://api.di-xiv.com";
      await fetchArtworks(apiURL, artworkIds);
    } else {
      updateUI();
    }
  });
</script>
