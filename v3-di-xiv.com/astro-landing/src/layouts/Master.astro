---
import Header from "@/components/header/Header.astro";
//
const currentUrl = Astro.url.toString();
// Styles
import "@/styles/global.css";
import "@/styles/transitions-animations.css";
import "@/styles/dark-mode.css";
import "@/styles/fonts.css";
import "@/styles/mdx.css";
///
import "@/styles/bg/polkadot-bg.css";
//
import GoToTop from "@/components/reusables/GoToTop.tsx";
//
import Footer from "@/components/footer/Footer.astro";
//
import CookieNotice from "@/components/reusables/CookieNotice.astro";
//
interface Props {
  locale: string;
  footerLocale: string;
  metaTitle: string;
  metaDescription: string;
  metaKeywords: string;
  metaImageURL: string;
  metaImageFormat: string;
  metaImageWidth: string;
  metaImageHeight: string;
  metaImageAlt: string;
  headerTitle: string;
  headerMobileTitle: string;
  headerHref: string;
  headerCurrentPage: string;
  localizedSiteMap: string;
  localizedAcknoledgements: string;
  localizedCopyrightNotice: string | { __html: string };
  localizedOtherLinks: string;
  localizedWhy: string;
  localizedTakedown: string;
  localizedInquiries: string;
  localizedDMCA: string;
  localizedCheckingYourBrowser: string | { __html: string };
}
const {
  locale,
  footerLocale,
  metaTitle,
  metaDescription,
  metaKeywords,
  metaImageURL,
  metaImageFormat,
  metaImageWidth,
  metaImageHeight,
  metaImageAlt,
  headerTitle,
  headerMobileTitle,
  headerHref,
  headerCurrentPage,
  localizedSiteMap,
  localizedAcknoledgements,
  localizedCopyrightNotice,
  localizedOtherLinks,
  localizedWhy,
  localizedTakedown,
  localizedInquiries,
  localizedDMCA,
  localizedCheckingYourBrowser,
} = Astro.props as Props;
let NavWrapper;
try {
  NavWrapper = await import(
    `../components/header/nav-buttons/${footerLocale}/NavButtonWrapper.astro`
  );
} catch (e) {
  console.error("Error loading localized component:", e);
}
---

<!--
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
    ,---,                           ,--,     ,--,     ,---,
  .'  .' `\     ,--,                |'. \   / .`|  ,`--.' |        ,---.
,---.'     \  ,--.'|        ,---,.  ; \ `\ /' / ;  |   :  :       /__./|
|   |  .`\  | |  |,       ,'  .' |  `. \  /  / .'  :   |  '  ,---.;  ; |
:   : |  '  | `--'_     ,---.'   ,   \  \/  / ./   |   :  | /___/ \  | |
|   ' '  ;  : ,' ,'|    |   |    |    \  \.'  /    '   '  ; \   ;  \ ' |
'   | ;  .  | '  | |    :   :  .'      \  ;  ;     |   |  |  \   \  \: |
|   | :  |  ' |  | :    :   |.'       / \  \  \    '   :  ;   ;   \  ' .
'   : | /  ;  '  : |__  `---'        ;  /\  \  \   |   |  '    \   \   '
|   | '` ,/   |  | '.'|            ./__;  \  ;  \  '   :  |     \   `  ;
;   :  .'     ;  :    ;            |   : / \  \  ; ;   |.'       :   \ |
|   ,.'       |  ,   /             ;   |/   \  ' | '---'          '---"
'---'          ---`-'              `---'     `--`
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
❈ Fancy meeting you here!
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
 _____                                   _____             _
/  ___|                                 /  __ \           | |
\ `--.   ___   _   _  _ __   ___   ___  | /  \/  ___    __| |  ___
 `--. \ / _ \ | | | || '__| / __| / _ \ | |     / _ \  / _` | / _ \
/\__/ /| (_) || |_| || |   | (__ |  __/ | \__/\| (_) || (_| ||  __/
\____/  \___/  \__,_||_|    \___| \___|  \____/ \___/  \__,_| \___|

                  .
  .. ............;;.
    ..::::::::::::;;;;. https://github.com/di-xiv/di-xiv.com
  . . ::::::::::::;;:'
                  :'
❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈❈
--><!doctype html>
<html lang={locale}>
  <head>
    <meta charset="utf-8" />
    <style is:inline>
      :root {
        --initial-bg-color: #181a1b;
        --initial-text-color: #efefef;
      }
      @media (prefers-color-scheme: light) {
        :root {
          --initial-bg-color: #c8a99f;
          --initial-text-color: #181a1b;
        }
      }
      html,
      body {
        background-color: var(--initial-bg-color);
        color: var(--initial-text-color);
      }
      body {
        opacity: 0;
        transition:
          opacity 0.1s ease,
          background-color 0.1s ease;
      }
      html.no-js body {
        opacity: 1;
      }
    </style>
    <link rel="icon" href="/icons/favicon.ico" type="image/x-icon" />
    <link rel="canonical" href={currentUrl} />
    <meta http-equiv="Content-Language" content={locale} />
    <meta name="color-scheme" content="light, dark" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/icons/favicon.ico" type="image/x-icon" />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <meta name="generator" content={Astro.generator} />
    <meta name="description" content={metaDescription} />
    <meta name="keywords" content={metaKeywords} />
    <meta name="author" content="Di-XIV" />
    <meta name="title" content={metaTitle} />
    <meta property="og:title" content={metaTitle} />
    <meta property="og:description" content={metaDescription} />
    <meta property="og:image" content={metaImageURL} />
    <meta property="og:image:type" content={metaImageFormat} />
    <meta property="og:image:height" content={metaImageHeight} />
    <meta property="og:image:width" content={metaImageWidth} />
    <meta property="og:image:alt" content={metaImageAlt} />
    <meta property="og:url" content={currentUrl} />
    <meta property="og:locale" content={locale} />
    <meta property="og:site_name" content={metaTitle} />
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={metaImageURL} />
    <meta name="twitter:creator" content="@xiv_di" />
    <meta name="twitter:site" content="@xiv_di" />
    <script is:inline>
      document.documentElement.classList.remove("no-js");
    </script>
    <title>
      {metaTitle}
    </title>
  </head>
  <body
    class="flex flex-col w-full min-h-[100dvh] text-[#181a1b] dark:text-[#efefef]"
  >
    <div
      id="header-wrapper"
      class="flex items-center justify-evenly glassbox p-2"
    >
      <Header
        currentPage={headerCurrentPage}
        headerTitle={headerTitle}
        headerMobileTitle={headerMobileTitle}
        headerHref={headerHref}
      />
      {
        NavWrapper ? (
          <NavWrapper.default currentPage={headerCurrentPage} />
        ) : (
          <div>Error loading component</div>
        )
      }
    </div>
    <main class="flex-grow">
      <div
        id="main-wrapper"
        class="ultrawide-only:w-[50%] ultrawide-only:ml-[25%]
        w1920:w-[60%] w1920:ml-[20%]
        w1366:w-[75%] w1366:ml-[12.5%]
        w905:w-[90%] w905:ml-[5%]"
      >
        <slot />
      </div>
    </main>
    <GoToTop client:load />
    <CookieNotice />
    <Footer
      locale={footerLocale}
      currentPage={headerCurrentPage}
      localizedSiteMap={localizedSiteMap}
      localizedAcknoledgements={localizedAcknoledgements}
      mobileAcknoledgements="🙏"
      localizedCopyrightNotice={localizedCopyrightNotice}
      localizedOtherLinks={localizedOtherLinks}
      localizedWhy={localizedWhy}
      localizedDMCA={localizedDMCA}
      localizedInquiries={localizedInquiries}
      localizedTakedown={localizedTakedown}
      localizedCheckingYourBrowser={localizedCheckingYourBrowser}
    />
  </body>
  <script>
    function setBackgroundColor(color) {
      document.documentElement.style.setProperty("--bg-color", color);
      document.body.style.backgroundColor = color;
    }

    function getRandomColor(colorArray) {
      return colorArray[Math.floor(Math.random() * colorArray.length)];
    }

    function applyBackgroundColor() {
      if (window.matchMedia) {
        const prefersDarkMode = window.matchMedia(
          "(prefers-color-scheme: dark)",
        ).matches;
        const darkModeColors = [
          "#1c1b22", // Dark Charcoal
          "#3b3948", // Slate Gray
          "#1f1f1f", // Almost Black
          "#181818", // Deep Black
          "#15202b", // Midnight Blue
          "#313338", // Graphite Gray
          "#36393f", // Gunmetal
          "#2C2F33", // Dark Slate
          "#23272A", // Dark Storm Gray
          "#1D2A35", // Dark Teal
          "#2B2E3A", // Deep Blue Gray
          "#22303C", // Muted Ocean Blue
          "#20232A", // Charcoal Black
          "#171A21", // Deep Space Black
        ];

        const lightModeColors = [
          "#CB99C9", // Lavender
          "#F49AC2", // Light Pink
          "#AEC6CF", // Pastel Blue
          "#CDEB83", // Light Green
          "#8BC3B1", // Mint Green
          "#F9D999", // Light Yellow-Orange
          "#99C7FF", // Pastel Sky Blue
          "#EDE9AF", // Pale Yellow
          "#FFBDBD", // Soft Coral
          "#E5D4EF", // Soft Lilac
          "#D5E8D4", // Pale Mint
          "#FDEFD3", // Light Peach
          "#C4D9F2", // Light Periwinkle
          "#FADADD", // Soft Rose
          "#D8E1E8", // Cool Gray
        ];

        const currentTime = new Date().getTime();
        const storedData = JSON.parse(
          localStorage.getItem("backgroundColorData") || "{}",
        );
        const twelveHoursInMs = 12 * 60 * 60 * 1000;

        let newColor;

        if (
          !storedData.color ||
          !storedData.timestamp ||
          currentTime - storedData.timestamp > twelveHoursInMs ||
          (prefersDarkMode && !darkModeColors.includes(storedData.color)) ||
          (!prefersDarkMode && !lightModeColors.includes(storedData.color))
        ) {
          newColor = getRandomColor(
            prefersDarkMode ? darkModeColors : lightModeColors,
          );
          localStorage.setItem(
            "backgroundColorData",
            JSON.stringify({
              color: newColor,
              timestamp: currentTime,
            }),
          );
        } else {
          newColor = storedData.color;
        }

        setBackgroundColor(newColor);
      } else {
        console.log("matchMedia not supported, unable to determine dark mode.");
      }
    }

    // Apply background color after a short delay
    setTimeout(() => {
      applyBackgroundColor();
      document.body.style.opacity = "1";
    }, 50);

    // Listen for changes in color scheme preference
    window.matchMedia("(prefers-color-scheme: dark)").addListener(() => {
      location.reload();
    });
  </script>
</html>
